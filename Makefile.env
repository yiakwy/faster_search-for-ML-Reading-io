# === Variables set by configure
# define some Makefile variables for the compiler and compiler flags
# to use Makefile variables later in the Makefile: $()
# for C++ define  CC = g++
CC=gcc
RM=rm -rf
# recursively use of make
MAKE=make

exec=./bin
include=./include
lib=./lib

# -l{libarary_name}, linked into executables
LIBS=-lm
#  -g adds debugging information to the executable file
#  -Wall turns on most, but not all, compiler warnings
CFLAGS= -g -Wall
# CFLAGS=-ansi -Os
# define libs other than usr/lib
LFLAGS=-L./$(lib)

full_dirs:=$(shell find . -maxdepth 1 -type d)
dirs:=$(filter-out $(patsubst %, ./%, $(exclude_dirs)), $(full_dirs))

SRCS=$(wildcard *.c) \
     $(wildcard $(SRCS_DIR)/*.c) \
	 $(wildcard $(SRCS_DIR)/*/*.c)
SRCS_DIR=./src

# or use 
# OBJS= $(SRCS:.c=.o)
OBJ=$(patsubst %.c, %.o, $(SRCS))

$(TARGET):$(OBJ)
	$(CC) $(CFLAGS) -I$(include) -o $@ $^ $(LFAGS) $(LIBS)
	mv $@ $(exec)	

# the more up to date is the pattern
# %.o : %.c
.c.o:
	$(CC) $(CFLAGS) -I$(include) -c $< -o $@

# for recurise use of make , using this		
# $(MAKE) -C $$dir; \
# $(CC) $(CFLAGS) -I$(include)/$(dir) -o $@ $^ $(LFAGS) $(LIBS) \
trigger:
	@for dir in $(SRCS_DIR); do \
		if [ -d $$dir ]; then \
			echo "entering $$dir"; \
		fi; \
	done;
	@echo "Done!"
	
all: $(TARGET)
	@echo "target has been complied!"
	@echo "full dirs:\n" $(full_dirs)
	@echo "exclude dirs:\n" $(patsubst %, ./%, $(exclude_dirs))
	@echo "derived dirs:\n" $(dirs)
	@echo "src: " $(SRCS)
	@echo "obj: " $(OBJ)
	@echo "ends!"

status: *.c
	lpr -p $?
	touch status

.PHONY : clean
clean:
	$(RM) $(OBJ) $(exec)/$(TARGET) 
	
	
# test cases
